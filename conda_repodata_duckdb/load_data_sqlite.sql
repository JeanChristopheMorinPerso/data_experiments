-- https://github.com/asg017/sqlite-http
.load ./dist/http0

-- Create the "packages" table
CREATE TABLE packages (
    app_cli_opts JSON,
    app_entry VARCHAR,
    app_type VARCHAR,
    archive_type VARCHAR,
    build VARCHAR,
    build_number UBIGINT,
    channel VARCHAR,
    constraints VARCHAR[],
    depends VARCHAR[],
    filename VARCHAR,
    icon VARCHAR,
    license VARCHAR,
    license_family VARCHAR,
    md5 VARCHAR,
    name VARCHAR,
    namespace VARCHAR,
    namespace_in_name BOOLEAN,
    revoked BOOLEAN,
    sha256 VARCHAR,
    size UBIGINT,
    subdir VARCHAR,
    summary VARCHAR,
    timestamp UBIGINT,
    track_features VARCHAR,
    type VARCHAR,
    version VARCHAR,
    -- url VARCHAR AS (concat_ws('/', channel, subdir, filename)),
    PRIMARY KEY (filename, channel, subdir)
);

CREATE TABLE tmp_linux_64 AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/linux-64/repodata.json') AS body;
CREATE TABLE tmp_linux_aarch64 AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/linux-aarch64/repodata.json') AS body;
CREATE TABLE tmp_linux_s390x AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/linux-s390x/repodata.json') AS body;
CREATE TABLE tmp_linux_ppc64le AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/linux-ppc64le/repodata.json') AS body;
CREATE TABLE tmp_osx_64 AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/osx-64/repodata.json') AS body;
CREATE TABLE tmp_osx_arm64 AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/osx-arm64/repodata.json') AS body;
CREATE TABLE tmp_win_64 AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/win-64/repodata.json') AS body;
CREATE TABLE tmp_noarch AS SELECT http_get_body('https://repo.anaconda.com/pkgs/main/noarch/repodata.json') AS body;

INSERT INTO packages 
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_64, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_64, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_aarch64, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_aarch64, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_s390x, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_s390x, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_ppc64le, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_linux_ppc64le, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_osx_64, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_osx_64, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_osx_arm64, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_osx_arm64, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_win_64, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_win_64, json_each(json_extract(body, '$."packages.conda"')) packages

    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'tar.bz2' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_noarch, json_each(json_extract(body, '$.packages')) packages
    UNION ALL
    SELECT json_extract(packages.value, '$.app_cli_opts') as app_cli_opts, json_extract(packages.value, '$.app_entry') as app_entry, json_extract(packages.value, '$.app_type') as app_type, 'conda' as archive_type, json_extract(packages.value, '$.build') as build, json_extract(packages.value, '$.build_number') as build_number, format('https://repo.anaconda.com/pkgs/%s', json_extract(packages.value, '$.channel')) as channel, json_extract(packages.value, '$.constraints') as constraints, json_extract(packages.value, '$.depends') as depends, packages.key as filename, json_extract(packages.value, '$.icon') as icon, json_extract(packages.value, '$.license') as license, json_extract(packages.value, '$.license_family') as license_family, json_extract(packages.value, '$.md5') as md5, json_extract(packages.value, '$.name') as name, json_extract(packages.value, '$.namespace') as namespace, json_extract(packages.value, '$.namespace_in_name') as namespace_in_name, json_extract(packages.value, '$.revoked') as revoked, json_extract(packages.value, '$.sha256') as sha256, json_extract(packages.value, '$.size') as size, json_extract(packages.value, '$.subdir') as subdir, json_extract(packages.value, '$.summary') as summary, json_extract(packages.value, '$.timestamp') as timestamp, json_extract(packages.value, '$.track_features') as track_features, json_extract(packages.value, '$.type') as type, json_extract(packages.value, '$.version') as version FROM tmp_noarch, json_each(json_extract(body, '$."packages.conda"')) packages;

DROP TABLE tmp_linux_64;
DROP TABLE tmp_linux_aarch64;
DROP TABLE tmp_linux_ppc64le;
DROP TABLE tmp_linux_s390x;
DROP TABLE tmp_osx_64;
DROP TABLE tmp_osx_arm64;
DROP TABLE tmp_win_64;
DROP TABLE tmp_noarch;
